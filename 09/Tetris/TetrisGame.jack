/**
 * Represents a Tetris game.
 */
class TetrisGame {

    static TetrisGame instance; // A Tetris game
    field boolean exit;       // true when the game is over     
    field int num_lines_cleared; // current number of lines cleared
    // field Square square; // test square

    field IBlock i_block;

    field int line_width; // width of bounding lines
    field int move_delay_ms; // Delay between moves

    field int field_width; // width of Tetris field
    field int field_height; // height of Tetris field
    
    // 20 x 10 array showing whether field is empty (= 0) or occupied(= 1)
    // Y x X as we want to iterate through rows to identify cleared lines
    field Array map;

    /** Constructs a new Tetris game. */
    constructor TetrisGame new() {

        var int i, j;
        var Array arr;

	    do Screen.clearScreen();
        let num_lines_cleared = 0;

        let line_width = 2;
        let move_delay_ms = 200;
        let field_width = 10;
        let field_height = 20;

        do Screen.drawRectangle(196 - line_width, 16, 195, 255);
        do Screen.drawRectangle(316, 16, 315 + line_width, 255);

	    do Output.moveCursor(22,0);
	    do Output.printString("Lines cleared: 0");

        let exit = false;
	    let num_lines_cleared = 0;

        let map = Array.new(field_height);
        let i = 0;
        while (i < field_height){
            let arr = Array.new(field_width);
            let j = 0;
            while (j < field_width){
                let arr[j] = 0;
                let j = j + 1;
            }
            let map[i] = arr;
            let i = i + 1;  
        }

        let i_block = IBlock.new(5, -2);
        do i_block.draw();

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Tetris game. */
    function void newInstance() {
        let instance = TetrisGame.new();
        return;
    }
    
    /** Returns this Tetris game. */
    function TetrisGame getInstance() {
        return instance;
    }

    /** Starts the game, and handles input from the user
    controlling the block's movements.
    */
    method void run() {
        var char key;
        var boolean move_left;
        var boolean move_right;
        var boolean rotate_up;
        var boolean rotate_down;

        while (~exit) {

            let move_left = false;
            let move_right = false;
            let rotate_up = false;
            let rotate_down = false;

            // Waits for a key to be pressed
            while ((key = 0) & (~exit)){
                let key = Keyboard.keyPressed();
                do i_block.fall();
                do Sys.wait(move_delay_ms);
            }

            if (key = 140){
                let exit = true;
            }
            else {
                if (key = 130){
                    let move_left = true;
                }
                else {
                    if (key = 132){
                        let move_right = true;
                    }
                    else {
                        if (key = 131){
                            let rotate_up = true;
                        }
                        else {
                            if (key = 133){
                                let rotate_down = true;
                            }
                        }
                    }
                }
            }

            // Waits for the key to be released
            while ((~(key = 0)) & (~exit)){
                let key = Keyboard.keyPressed();
                if (move_left){
                    do i_block.move_left();
                }
                else {
                    if (move_right){
                        do i_block.move_right();
                    }
                    else {
                        if (rotate_up){
                            do i_block.rotate_up();
                        }
                        else {
                            if (rotate_down){
                                do i_block.rotate_down();
                            }
                        }
                }


                }
                do i_block.fall();
                do Sys.wait(move_delay_ms);
            }
        }

        if (exit) {
            do Output.moveCursor(10,27);
            do Output.printString("Game Over");
        }

    return;
    }

}