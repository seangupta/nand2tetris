/** Represents an I block. */

class IBlock {
    field List squares; // individual component squares (length 4)
    field int rotation; // 0-3 (starts at 0) 

    constructor IBlock new(int Ax, int Ay) {
        // Ax: x coordinate (within Tetris field) of top left bounding box square
        // Ay: y coordinadate (within Tetris field) of top left bounding box square

        var Square sq0, sq1, sq2, sq3;
        
        let rotation = 0;
        
        let sq0 = Square.new(Ax, Ay + 2);
        let sq1 = Square.new(Ax + 1, Ay + 2);
        let sq2 = Square.new(Ax + 2, Ay + 2);
        let sq3 = Square.new(Ax + 3, Ay + 2);

        let squares = Array.new(4);
        let squares[0] = sq0;
        let squares[1] = sq1;
        let squares[2] = sq2;
        let squares[3] = sq3;

        do show();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    method void draw() {
        var int i;
        var Square sq;
        
        let i = 0;
        while (i < 4) {
            let sq = squares[i];
            do sq.draw();
            let i = i + 1;
        }

        return;
    }

    method void fall(){
        var int i;
        var Square sq;

        let sq = squares[0];
        if (sq.get_y() < 19){
            do hide();

            let i = 0;
            while (i < 4) {
                let sq = squares[i];
                do sq.fall();
                let i = i + 1;
            }

            do show();
        }
        return;
    }

    method void move_left(){
        var int i;
        var Square sq;

        let sq = squares[0];
        if (sq.get_x() > 0){
            do hide();

            let i = 0;
            while (i < 4) {
                let sq = squares[i];
                do sq.move_left();
                let i = i + 1;
            }

            do show();
        }
        return;
    }

    method void move_right(){
        var int i;
        var Square sq;

        let sq = squares[3];
        if (sq.get_x() < 9){
            do hide();

            let i = 0;
            while (i < 4) {
                let sq = squares[i];
                do sq.move_right();
                let i = i + 1;
            }

            do show();
        }
        return;
    }

    // TODO: Implement method to check if valid
    // i.e. try movement and check if valid first, then set to
    // new position

    method void rotate_up(){
        var int i, sq0_x, sq0_y;
        var Square sq;

        if ((rotation = 0) | (rotation = 2)){

            let sq = squares[0];
            if (sq.get_y() < 19){

                do hide();

                let sq0_x = sq.get_x();
                let sq0_y = sq.get_y();

                let squares[0] = Square.new(sq0_x + 2, sq0_y - 2);
                let squares[1] = Square.new(sq0_x + 2, sq0_y - 1);
                let squares[3] = Square.new(sq0_x + 2, sq0_y + 1);

                let rotation = rotation + 1;

                do show();
            }
        }
        return;
    }

    method void rotate_down(){
        var int i, sq0_x, sq0_y;
        var Square sq;

        if ((rotation = 1) | (rotation = 3)){

            let sq = squares[0];
            if (sq.get_y() < 19){

                do hide();

                let sq0_x = sq.get_x();
                let sq0_y = sq.get_y();

                let squares[0] = Square.new(sq0_x - 2, sq0_y + 2);
                let squares[1] = Square.new(sq0_x - 2, sq0_y + 1);
                let squares[3] = Square.new(sq0_x - 2, sq0_y - 1);

                let rotation = rotation + 1;
                if (rotation = 4){
                    let rotation = 0;
                }

                do show();
            }
        }
        return;
    }
}