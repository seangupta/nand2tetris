// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array powersOfTwo, masks_01;

    static int screen_map_start, screen_map_end;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        do Math.init();
        let color = true;
        let screen_map_start = 16384;
        let screen_map_end = 24575;

        let powersOfTwo = Math.get_powers_of_two();

        // i-th entry = 0s followed by (1, i times)
        let masks_01 = Array.new(17);
        let masks_01[0] = 0;

        let i = 1;
        while (i < 17) {
            let masks_01[i] = masks_01[i - 1] + powersOfTwo[16 - i];
            let i = i + 1;
        }
    
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;

        let address = screen_map_start;
        while (address < screen_map_end + 1) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit_idx, new_value, tmp;
        var boolean bit_value;

        if ((x < 0) | (x > 511)) {
            do Sys.error(7);
        }

        if ((y < 0) | (y > 255)) {
            do Sys.error(7);
        }

        let tmp = x / 16;
        let address = screen_map_start + ((32 * y) + tmp);
        let value = Memory.peek(address);

        let bit_idx = x - (16 * tmp);
        let bit_value = Math.bit(value, bit_idx);

        if (bit_value & (~color)) {
            let new_value = value - powersOfTwo[bit_idx];
            do Memory.poke(address, new_value);
        }
        else {
            if ((~bit_value) & color) {
                let new_value = value + powersOfTwo[bit_idx];
                do Memory.poke(address, new_value);
            }
        }

        return;
    }

    function void drawLineHorizontal(int x1, int x2, int y) {
        var int address, tmp1, tmp2, rem1, rem2, value, new_value, mask, x_min, x_max;
        var int num_pixels_to_color_left, num_pixels_to_color_right;
        var int address_complete_start, address_complete_end, address_incomplete_left, address_incomplete_right;

        let x_min = Math.min(x1, x2);
        let x_max = Math.max(x1, x2);

        let tmp1 = x_min / 16;
        let rem1 = x_min - (16 * tmp1);
        if (rem1 > 0) {
            let num_pixels_to_color_left = 16 - rem1;
            let address_complete_start = screen_map_start + ((32 * y) + (tmp1 + 1));
        }
        else {
            let num_pixels_to_color_left = 0;
            let address_complete_start = screen_map_start + ((32 * y) + tmp1);
        }

        let tmp2 = x_max / 16;
        let rem2 = x_max - (16 * tmp2);
        if (rem2 < 15) {
            let num_pixels_to_color_right = rem2 + 1;
            let address_complete_end = screen_map_start + ((32 * y) + (tmp2 - 1));
        }
        else {
            let num_pixels_to_color_right = 0;
            let address_complete_end = screen_map_start + ((32 * y) + tmp2);
        }

        if (tmp1 = tmp2) {
            // colour line within single address
            let address = screen_map_start + ((32 * y) + tmp1);

            let value = Memory.peek(address);

            // 0s followed by 1s (from rem1 to rem2) followed by 0s
            let mask = masks_01[16 - rem1] - masks_01[15 - rem2];

            if (color) {
                let new_value = value | mask;
            }
            else {
                let new_value = value & (~mask);
            }
            do Memory.poke(address, new_value);
        }
        else {
            if (num_pixels_to_color_left > 0) {
                // draw all pixels in left incomplete segment
                let address_incomplete_left = address_complete_start - 1;
                let value = Memory.peek(address_incomplete_left);
                let mask = masks_01[num_pixels_to_color_left];

                if (color) {
                    let new_value = value | mask;
                }
                else {
                    let new_value = value & (~mask);
                }
                do Memory.poke(address_incomplete_left, new_value);
            }

            // colour complete lines
            let address = address_complete_start;
            while (address < (address_complete_end + 1)) {
                if (color) {
                    do Memory.poke(address, -1);
                }
                else {
                    do Memory.poke(address, 0);
                }
                let address = address + 1;
            }

            if (num_pixels_to_color_right > 0) {
                // draw all pixels in right incomplete segment
                let address_incomplete_right = address_complete_end + 1;
                let value = Memory.peek(address_incomplete_right);
                let mask = masks_01[16 - num_pixels_to_color_right];

                if (color) {
                    let new_value = value | (~mask);
                }
                else {
                    let new_value = value & mask;
                }
                do Memory.poke(address_incomplete_right, new_value);
            }
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, i, mult, a, b, diff;

        if ((x1 < 0) | (x1 > 511)) {
            do Sys.error(8);
        }

        if ((y1 < 0) | (y1 > 255)) {
            do Sys.error(8);
        }

        if ((x2 < 0) | (x2 > 511)) {
            do Sys.error(8);
        }

        if ((y2 < 0) | (y2 > 255)) {
            do Sys.error(8);
        }

        if (x1 = x2) {
            let y = Math.min(y1, y2);
            let dy = Math.abs(y2 - y1);

            let i = 0;
            while (i < (dy + 1)) {
                do Screen.drawPixel(x1, y + i);
                let i = i + 1;
            }
            return;
        }

        if (y1 = y2) {
            do Screen.drawLineHorizontal(x1, x2, y1);
            return;
        }

        if (x1 < x2) {
            let x = x1;
            let y = y1;
            let dx = x2 - x1;
            let dy = y2 - y1;
        }
        else {
            let x = x2;
            let y = y2;
            let dx = x1 - x2;
            let dy = y1 - y2;
        }

        if (dy > 0) {
            // going south-east
            let mult = 1;
        }
        else {
            // going north-east
            // just need to invert y-direction
            let mult = -1;
            let dy = -dy;
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        while ((a < (dx + 1)) & (b < (dy + 1))) {
            do Screen.drawPixel(x + a, y + (b * mult));
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        if ((x1 < 0) | (x1 > 511)) {
            do Sys.error(9);
        }

        if ((y1 < 0) | (y1 > 255)) {
            do Sys.error(9);
        }

        if ((x2 < x1) | (x2 > 511)) {
            do Sys.error(9);
        }

        if ((y2 < y1) | (y2 > 255)) {
            do Sys.error(9);
        }

        let y = y1;
        while (y < (y2 + 1)) {
            do Screen.drawLineHorizontal(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt, x1, x2, y1;

        if (r > 181) {
            do Sys.error(13);
        }

        if (((x - r) < 0) | ((x + r) > 511)) {
            do Sys.error(12);
        }

        if (((y - r) < 0) | ((y + r) > 255)) {
            do Sys.error(12);
        }

        let dy = -r;
        while (dy < (r + 1)) {
            
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            let x1 = x - sqrt;
            let x2 = x + sqrt;
            let y1 = y + dy;

            do Screen.drawLineHorizontal(x1, x2, y1);
            let dy = dy + 1;
        }
        return;
    }
}
