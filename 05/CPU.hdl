// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Determine instruction type
    And(a=instruction[15], b=true, out=isCinstr);
    Not(in=isCinstr, out=isAinstr);

	Mux16(a=instruction, b=aluOut, sel=isCinstr, out=instrOrAluOut);

    // A = addressM
    Mux16(a=A, b=inM, sel=instruction[12], out=AorM);

    // compute ALU output from D and (A or M depending on AorM)
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], 
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=outM, out=aluOut, zr=zr, ng=ng);

    // Load A if it's an A instruction or the relevant dest bit in a C
    // instruction is 1
    Or(a=instruction[5], b=isAinstr, out=loadA);
    ARegister(in=instrOrAluOut, load=loadA, out=A, out[0..14]=addressM);

    // Load D if it's a C instruction and the relevant dest bit is 1
    And(a=isCinstr, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=D);

    // Write to M if it's a C-instruction and the relevant dest bit is 1
    And(a=instruction[3], b=isCinstr, out=writeM);

    // Jump because zero?
    And(a=zr, b=instruction[1], out=jmpZero);

    // Jump because negative?
    And(a=ng, b=instruction[2], out=jmpNegative);

    // Jump because positive?
    Not(in=zr, out=notZero);
    Not(in=ng, out=notNegative);
    And(a=notZero, b=notNegative, out=positive);
    And(a=positive, b=instruction[0], out=jmpPositive);

    // Jump?
    Or(a=jmpZero, b=jmpNegative, out=jmpZeroOrjmpNegative);
    Or(a=jmpZeroOrjmpNegative, b=jmpPositive, out=jumpifCinstruction);

    // No jump? -> increment
    Not(in=jumpifCinstruction, out=incIfCinstruction);

    And(a=isCinstr, b=jumpifCinstruction, out=jump);

    // Not jump and is C -> increment
    And(a=isCinstr, b=incIfCinstruction, out=incBecauseC);
    Or(a=incBecauseC, b=isAinstr, out=inc);

    PC(in=A, load=jump, inc=inc, reset=reset, out[0..14]=pc);
}